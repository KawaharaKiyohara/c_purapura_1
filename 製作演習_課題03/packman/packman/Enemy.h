#pragma once


/////////////////////////////////////////////////////
// 定数。
/////////////////////////////////////////////////////
const int MAX_ENEMY = 100;		//敵の最大数。

//敵の状態を表す列挙子。
//enumは上から0,1,2と値が割り当てられます。
//int型の定数だと考えてOKです。
enum EnemyState {
	EnemyState_Haikai,		//0 徘徊ステート。
	EnemyState_Tuiseki,		//1 追跡ステート。
	EnemyState_Return,		//2 初期位置に戻るステート。
};
/////////////////////////////////////////////////////
// 構造体の宣言。
/////////////////////////////////////////////////////
/*!----------------------------------------------------
* @brief	エネミーの構造体。
----------------------------------------------------*/
struct SEnemy {
	int posX = 0;							//X座標。
	int posY = 0;							//Y座標。
	int initPosX = 0;						//初期X座標。
	int initPosY = 0;						//初期Y座標
	EnemyState state = EnemyState_Haikai;	//敵のステート。
	int waitCount = 5;						//ウェイトカウント。
};

/////////////////////////////////////////////////////
// グローバル変数のextern宣言。
// extern宣言は、「実体はどこかにあるから、それを使ってね」
// と教えるものです。変数の定義はどこかのcppファイルにある必要があります。
//
/////////////////////////////////////////////////////
extern SEnemy g_enemyArray[MAX_ENEMY];	//エネミーの配列。実体はEnemy.cppにあります。

/////////////////////////////////////////////////////
// グローバル関数の関数宣言。
/////////////////////////////////////////////////////
/*!----------------------------------------------------
* @brief	エネミーの初期化。
* @detail
*   座標の更新とか、状態の更新とかを行う。
*@param[in]	enemyNo		更新を行うエネミーの番号。
*@param[in]	posX		初期のX座標。
*@param[in] posY		初期のY座標。
----------------------------------------------------*/
void EnemyInitialyze(int enemyNo, int posX, int posY);

/*!----------------------------------------------------
 * @brief	エネミーの更新処理。
 * @detail
 *   座標の更新とか、状態の更新とかを行う。
 *@param[in]	enemyNo		更新を行うエネミーの番号。
 ----------------------------------------------------*/
void EnemyUpdate(int enemyNo);

/*!----------------------------------------------------
 * @brief	エネミーを描画。
 *@param[in]	enemyNo		更新を行うエネミーの番号。
 ----------------------------------------------------*/
void EnemyDraw(int enemyNo);
